=========================
Protein-DNA with MELD
=========================

Intro
===========================

In this tutorial we are going to prepare a setup script and other necessary files required for a Protein-DNA simulation. It is recommended that you review "getting started" before this one. The ideal goal of this part is to sample many binding/unbinfding events so that the protein has enough chances of exploring and finding the right binding pose. For sake of simplicity, I'm using 1azp_, a small protein-DNA complex from PDB. Here's a list of files needed for this tutorial (all of them are in "example" folder):

.. _1azp: https://www.rcsb.org/structure/1AZP

* DNA-sequence.dat
* DNA-hbonds.dat
* secondary-structure.dat
* protein-DNA-contacts.dat
* protein-contacts.dat
* starting-structure.pdb
* restraints.py
* setupMELD.py

DNA-sequence.dat
----------------------------
This is a simple dat file with the sequence of the first DNA strand in FASTA format without the header:

``GCGATCGC``

DNA-hbonds.dat
----------------------------
This file will be generated by setupMELD.py automatically and it includes hydrogen bond contacts between DNA pairs.
Here's the first five lines of the file:
::

  1 N2 16 O2 3.0
  
  1 N1 16 N3 3.0
  
  1 O6 16 N4 3.0

Notice the empty lines between the lines. Every restraint group is enclosed by empty lines so here every hydrogen bond is a single group. The first group for example specifies a distance of 3.0 angstroms between N2 of residue 1 and O2 of residue 16. Make sure you have an empty line at the end of the file too.

secondary-structure.dat
----------------------------
This is another plain text file in which there is a character specifying the secondary structure of each residue. random coils are denoted by ``.``, helices are specified by ``H`` and ``E`` corresponds to strands. Since DNA comes first in our topology and we are not restraining it for secondary strures, the first 16 dots in the file represent the DNA and the rest is for protein.
::

  ..................EEEEEE.....EE.HHH....EEE..EEEEEE.................HHHHHHHHHHHHH..
  
You can calculate secondary structures with psipred and modify the output to match the format required by MELD.

protein-DNA-contacts.dat
----------------------------
Here's where you will feed data into MELD. Whatever the source of your data, it will need to be simplified into a set of atom-atom contacts that will be used to specify restraints. Since 1azp is already a solved crystal structure, you can pick a bunch of atoms from protein and DNA that are interacting at the interface. Here I used ``O5'`` and ``CB`` which are parts of the backbone of the protein and DNA, respectively. Here's the first five lines the file:
::

  22  CB 14 P 8.0
  
  22  CB 15 P 8.0
  
  22  CB 16 P 8.0

Note that here we put a distance of 8.0 for all pairs. Down the way we have the option to use this number or specify another desired distance that should be satisfied.

protein-DNA-contacts.dat
----------------------------

Since we are not interested in denaturing the protein at high temperature, we need to keep it's tertiary structure with some room for flexibility. We use the python script ``calculate-protein-contacts.py`` to find the backbone ``CA``s that are in proximity of each other and apply restraints on their pairwise distances to keep the conformation as it is.

starting-structure.pdb
----------------------------

The PDB file from which REMD will start. It is best to minimize this structure (using Amber, Gromacs, NAMD, etc.) before giving it to MELD. Also I have separated the protein from the DNA to prevent it from being trapped in a pose that we know is already favored in the first place.

restraints.py
----------------------------

A set of functions to define restraints based on files specified in setupMELD.py. We generally don't need to modify this file. It has been part of setupMELD.py which is now taken into a new file for simplicity.

setupMELD.py
----------------------------

This is the main file that will prepare the simulation setup for OpenMM. All other files mentioned abolve will be used in setupMELD.py

First things first, import the necessary modules:

.. code-block:: python

    import numpy as np
    from meld.remd import ladder, adaptor, master_runner
    from meld import comm, vault
    from meld import system
    from meld import parse
    from meld.system.restraints import LinearRamp,ConstantRamp
    import glob
    from restraints import *
    

